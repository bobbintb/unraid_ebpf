name: Workflow template
on:
  workflow_dispatch:
jobs:
  slackbuild_and_upload:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    container:
      image: ghcr.io/ich777/unraid_kernel:gcc_11.2.0
      options: --privileged
    steps:
    - 
      name: Checkout
      uses: actions/checkout@v4
    - name: Cache packages
      id: cache-packages
      uses: actions/cache@v4
      with:
        path: /var/cache/packages
        key: slackware-packages-${{ github.sha }}
        restore-keys: |
          slackware-packages-
        # key: ${{ runner.os }}-slackpkg-${{ hashFiles('**/package-list.txt') }}
        # restore-keys: |
        #   ${{ runner.os }}-slackpkg-
        #key: slackpkg-${{ runner.os }}-${{ inputs.VERSION }}-${{ hashFiles('SlackBuilds/**/*') }}
        #restore-keys: |
        #  slackpkg-${{ runner.os }}-${{ inputs.VERSION }}-
    -
      name: Update slackpkg
      run: |
        gecho() { printf '\033[0;32m'; command echo "$@"; printf '\033[0m'; }
        alias wget='wget -q'
        sed -i 's/^#*\s*BATCH=.*/BATCH=on/' /etc/slackpkg/slackpkg.conf
        sed -i 's/^#*\s*DEFAULT_ANSWER=.*/DEFAULT_ANSWER=y/' /etc/slackpkg/slackpkg.conf
        slackpkg() {
          command slackpkg "$@" <<< y 2>&1 | grep -E 'Installing package|GPG key added|Package .* installed\.'
        }
        installpkg() {
          command installpkg "$@" 2>&1 | grep -E 'Installing package|Package .* installed\.'
        }
        gecho "Processors detected: $(nproc)"
        gecho $(uname -r)

        gecho "Installing needed packages..."
        slackpkg update gpg <<< y
        slackpkg install zlib
        wget https://download.salixos.org/x86_64/extra-15.0/salix/development/pahole-1.23-x86_64-1salix15.0.txz
        wget https://slackers.it/repository/slackware64-current/git-lfs/git-lfs-3.6.1-x86_64-2cf.txz
        installpkg *.txz
        rm *.txz

        gecho "Finding latest unRaid version..."
        url=$(curl -s https://releases.unraid.net/usb-creator | jq -r '.os_list[0].url')
        filename=$(basename "${url}")
        name=$(curl -s https://releases.unraid.net/usb-creator | jq -r '.os_list[0].name')
        VERSION_ID=$(echo $name | sed 's/^Unraid //')
        gecho "Downloading ${VERSION_ID}... "
        [ -f $filename ] || wget $url
        gecho "done."
        
        gecho "Extracting Unraid... "
        unzip -o -q $filename -d unRAIDServer
        gecho "done."
        
        gecho "Determining kernel version needed for Unraid... "
        cd unRAIDServer    
        KERNEL_VERSION=$(file bzimage | awk -F'version ' '{print $2}' | cut -d' ' -f1 | cut -d'-' -f1)
        MAJOR_VERSION=${KERNEL_VERSION%%.*}
        gecho "Downloading Linux kernel ${KERNEL_VERSION}... "
        cd ..
        [ -f linux-${KERNEL_VERSION}.tar.xz ] || wget https://cdn.kernel.org/pub/linux/kernel/v${MAJOR_VERSION}.x/linux-${KERNEL_VERSION}.tar.xz
        gecho "done."

        gecho "Extracting Linux kernel... "
        mkdir -p linux
        tar xf linux-${KERNEL_VERSION}.tar.xz -C linux --strip-components 1
        gecho "done."

        gecho "Copying patches... "
        cd unRAIDServer
        unsquashfs -d patches bzfirmware src
        cd ..
        cp -r unRAIDServer/patches/src/linux-*-Unraid/. linux/
        gecho "done."

        gecho "Applying patches... "
        cd linux
        find . -type f -iname '*.patch' -print0 | xargs -n1 -0 patch -p1 -i
        gecho "done."

        gecho "Applying kernel config... "
        ./scripts/config --enable CONFIG_MD_UNRAID \
            --enable CONFIG_DEBUG_INFO \
            --disable CONFIG_DEBUG_INFO_NONE \
            --enable CONFIG_DEBUG_INFO_DWARF5 \
            --disable CONFIG_DEBUG_INFO_REDUCED \
            --enable CONFIG_DEBUG_INFO_COMPRESSED_NONE \
            --disable CONFIG_DEBUG_INFO_COMPRESSED_ZLIB \
            --disable CONFIG_DEBUG_INFO_COMPRESSED_ZSTD \
            --disable CONFIG_DEBUG_INFO_SPLIT \
            --enable CONFIG_DEBUG_INFO_BTF \
            --enable CONFIG_PAHOLE_HAS_SPLIT_BTF \
            --enable CONFIG_PAHOLE_HAS_LANG_EXCLUDE \
            --enable CONFIG_DEBUG_INFO_BTF_MODULES \
            --disable CONFIG_MODULE_ALLOW_BTF_MISMATCH \
            --disable CONFIG_GDB_SCRIPTS \
            --enable CONFIG_PROBE_EVENTS_BTF_ARGS \
            --disable CONFIG_SCHED_CLASS_EXT \
            --enable CONFIG_IKCONFIG \
            --enable CONFIG_IKCONFIG_PROC
        make -j$(nproc) oldconfig
        gecho "done."

        gecho "Making bzImage... "
        bzimagename=bzimage-${VERSION_ID}
        make -j$(nproc) bzImage > /dev/null
        mv arch/x86/boot/bzImage ../$bzimagename
        sha256sum ../$bzimagename | cut -d " " -f 1 > ../$bzimagename.sha256
        gecho "done."

        gecho "Making... "
        make -j$(nproc) > /dev/null
        gecho "done."
        
        gecho "Making modules... "
        make -j$(nproc) modules > /dev/null
        make INSTALL_MOD_PATH=../modules INSTALL_MOD_STRIP=1 modules_install > /dev/null
        find ../modules -name '*.ko' -exec pahole --btf_encode --skip_other {} \;
        cd ..
        depmod -b modules
        gecho "done."

        gecho "Creating bzmodules... "
        cd unRAIDServer
        unsquashfs -d modules bzmodules
        cd ..
        rm -rf unRAIDServer/modules/modules/*-Unraid
        cp -r modules/lib/modules/${KERNEL_VERSION}-Unraid unRAIDServer/modules/modules
        cd unRAIDServer
        mksquashfs modules ../bzmodules-${VERSION_ID}
        cd ..
        sha256sum bzmodules-${VERSION_ID} | cut -d " " -f 1 > bzmodules-${VERSION_ID}.sha256
        gecho "done."

        gecho "Extracting BTF... "
        cd linux
        cp vmlinux ../vmlinux
        cd ..
        slackpkg install llvm-13.0.0
        llvm-objcopy --dump-section .BTF=vmlinux-${VERSION_ID}.btf vmlinux
        gecho "done."

        gecho "Cleaning up... "
        rm vmlinux
        rm -dr ./linux/
        rm -dr ./unRAIDServer/
        rm unRAIDServer-*
        rm -dr linux-*
        rm -dr ./modules/
        gecho "done."
        
        REPO=${GITHUB_REPOSITORY##*/}
        REPO_DIR="/__w/${REPO}/${REPO}"
        git config --global --add safe.directory $REPO_DIR
    - 
      name: Commit changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: 'updated ${{ inputs.NAME }}'
